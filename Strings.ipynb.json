{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Mars exploration\n",
    "import math\n",
    "import os\n",
    "import random\n",
    "import re\n",
    "import sys\n",
    "\n",
    "def marsExploration(s):\n",
    "    count = 0\n",
    "    for i in range(0, len(s), 3):\n",
    "        sos = s[i:i+3]\n",
    "        if sos[0] != 'S':\n",
    "            count += 1\n",
    "        if sos[1] != 'O':\n",
    "            count += 1\n",
    "        if sos[2] != 'S':\n",
    "            count += 1\n",
    "    return(count)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n",
    "    s = input()\n",
    "    result = marsExploration(s)\n",
    "    fptr.write(str(result) + '\\n')\n",
    "    fptr.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Pangrams\n",
    "import math\n",
    "import os\n",
    "import random\n",
    "import re\n",
    "import sys\n",
    "import string\n",
    "\n",
    "def pangrams(s):\n",
    "    alphabet_string = string.ascii_lowercase     \n",
    "    alphabet_list = list(alphabet_string)\n",
    "    s = s.lower()\n",
    "    for c in s:\n",
    "        if c in alphabet_list:\n",
    "            alphabet_list.remove(c)\n",
    "    if len(alphabet_list) == 0:\n",
    "        return('pangram')\n",
    "    else:\n",
    "        return('not pangram')\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n",
    "    s = input()\n",
    "    result = pangrams(s)\n",
    "    fptr.write(result + '\\n')\n",
    "    fptr.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Camel case\n",
    "import math\n",
    "import os\n",
    "import random\n",
    "import re\n",
    "import sys\n",
    "\n",
    "def camelcase(s):\n",
    "    count = 1\n",
    "    for c in s:\n",
    "        if c.isupper():\n",
    "            count += 1\n",
    "    return(count)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n",
    "    s = input()\n",
    "    result = camelcase(s)\n",
    "    fptr.write(str(result) + '\\n')\n",
    "    fptr.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Strong password\n",
    "import math\n",
    "import os\n",
    "import random\n",
    "import re\n",
    "import sys\n",
    "\n",
    "def minimumNumber(n, password):\n",
    "    types = 0\n",
    "    digit = False\n",
    "    lower = False\n",
    "    upper = False\n",
    "    special = False\n",
    "    for c in password:\n",
    "        if c.isdigit():\n",
    "            digit = True\n",
    "        elif c.islower():\n",
    "            lower = True\n",
    "        elif c.isupper():\n",
    "            upper = True\n",
    "        elif c in \"!@#$%^&*()-+\":\n",
    "            special = True\n",
    "    if digit == True:\n",
    "        types += 1\n",
    "    if lower == True:\n",
    "        types += 1\n",
    "    if upper == True:\n",
    "        types += 1\n",
    "    if special == True:\n",
    "        types += 1\n",
    "    mt = 4 - types\n",
    "    if n < 6 and 6-n > mt:\n",
    "        return(6-n)\n",
    "    else:\n",
    "        return(mt)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n",
    "    n = int(input())\n",
    "    password = input()\n",
    "    answer = minimumNumber(n, password)\n",
    "    fptr.write(str(answer) + '\\n')\n",
    "    fptr.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Caesar cipher\n",
    "import math\n",
    "import os\n",
    "import random\n",
    "import re\n",
    "import sys\n",
    "\n",
    "def caesarCipher(s, k):\n",
    "    A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n",
    "    a = 'abcdefghijklmnopqrstuvwxyz'\n",
    "    n = \"\"\n",
    "    for c in s:\n",
    "        if c in A:\n",
    "            p = A.find(c)\n",
    "            if p+k < len(A):\n",
    "                n += A[p + k]\n",
    "            elif p + k >= len(A):\n",
    "                i = int((p+k)/len(A))\n",
    "                n += A[p + k - i*len(A)]\n",
    "        elif c in a:\n",
    "            p = a.find(c)\n",
    "            if p+k < len(a):\n",
    "                n += a[p + k]\n",
    "            elif p + k >= len(a):\n",
    "                i = int((p+k)/len(a))\n",
    "                n += a[p + k - i*len(a)]\n",
    "        else:\n",
    "            n += c\n",
    "    return(n)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n",
    "    n = int(input())\n",
    "    s = input()\n",
    "    k = int(input())\n",
    "    result = caesarCipher(s, k)\n",
    "    fptr.write(result + '\\n')\n",
    "    fptr.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
